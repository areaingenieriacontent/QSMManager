//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QSM_Manager.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class QuienSabeMasDBEntities : DbContext
    {
        public QuienSabeMasDBEntities()
            : base("name=QuienSabeMasDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<empresa> empresa { get; set; }
        public virtual DbSet<Grupo> Grupo { get; set; }
        public virtual DbSet<matricula> matricula { get; set; }
        public virtual DbSet<modulo> modulo { get; set; }
        public virtual DbSet<pregunta> pregunta { get; set; }
        public virtual DbSet<respuesta_pregunta> respuesta_pregunta { get; set; }
        public virtual DbSet<session_certificado> session_certificado { get; set; }
        public virtual DbSet<subcategoria> subcategoria { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<tipo_pregunta> tipo_pregunta { get; set; }
        public virtual DbSet<tipo_usuario> tipo_usuario { get; set; }
        public virtual DbSet<usuario> usuario { get; set; }
    
        public virtual int actualizar_session_certificado(Nullable<int> sessionId, Nullable<int> help50, Nullable<int> helpAud, Nullable<int> helpChange, Nullable<int> certification)
        {
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("sessionId", sessionId) :
                new ObjectParameter("sessionId", typeof(int));
    
            var help50Parameter = help50.HasValue ?
                new ObjectParameter("help50", help50) :
                new ObjectParameter("help50", typeof(int));
    
            var helpAudParameter = helpAud.HasValue ?
                new ObjectParameter("helpAud", helpAud) :
                new ObjectParameter("helpAud", typeof(int));
    
            var helpChangeParameter = helpChange.HasValue ?
                new ObjectParameter("helpChange", helpChange) :
                new ObjectParameter("helpChange", typeof(int));
    
            var certificationParameter = certification.HasValue ?
                new ObjectParameter("certification", certification) :
                new ObjectParameter("certification", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("actualizar_session_certificado", sessionIdParameter, help50Parameter, helpAudParameter, helpChangeParameter, certificationParameter);
        }
    
        public virtual int crear_session_certificado(Nullable<int> modId, Nullable<int> help50, Nullable<int> helpAud, Nullable<int> helpChange, Nullable<int> timeSession, Nullable<int> userId, ObjectParameter toReturnValue)
        {
            var modIdParameter = modId.HasValue ?
                new ObjectParameter("modId", modId) :
                new ObjectParameter("modId", typeof(int));
    
            var help50Parameter = help50.HasValue ?
                new ObjectParameter("help50", help50) :
                new ObjectParameter("help50", typeof(int));
    
            var helpAudParameter = helpAud.HasValue ?
                new ObjectParameter("helpAud", helpAud) :
                new ObjectParameter("helpAud", typeof(int));
    
            var helpChangeParameter = helpChange.HasValue ?
                new ObjectParameter("helpChange", helpChange) :
                new ObjectParameter("helpChange", typeof(int));
    
            var timeSessionParameter = timeSession.HasValue ?
                new ObjectParameter("timeSession", timeSession) :
                new ObjectParameter("timeSession", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("crear_session_certificado", modIdParameter, help50Parameter, helpAudParameter, helpChangeParameter, timeSessionParameter, userIdParameter, toReturnValue);
        }
    
        public virtual int insert_user_answer(Nullable<int> sessionId, Nullable<int> answerId)
        {
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("sessionId", sessionId) :
                new ObjectParameter("sessionId", typeof(int));
    
            var answerIdParameter = answerId.HasValue ?
                new ObjectParameter("answerId", answerId) :
                new ObjectParameter("answerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_user_answer", sessionIdParameter, answerIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> read_user_tries(Nullable<int> userId, ObjectParameter moduleId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("read_user_tries", userIdParameter, moduleId);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
